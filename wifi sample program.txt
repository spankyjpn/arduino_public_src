// ****************************************************************************
// Arduino uno R4 wifi sample source
// ----------------------------------------------------------------------------
// ArduinoでWiFi接続し、HTTPサーバにSSLまたは通常のリクエストでページを取得する
// Copyrigt 2025 by spankyjpn. all rights reserved.
// ****************************************************************************

#include "WiFiS3.h"

void waitUntilReady(WiFiSSLClient& client);

// WiFi接続情報
#define SECRET_SSID "TakeWi-Fi"
#define SECRET_PASS "take4401a"

// クライアントのインスタンスの生成
WiFiSSLClient client;

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  void setup( void )
//  起動時に１回だけ呼ばれる処理
//  引　数：なし
//  戻り値：なし
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void setup() {
  //
  // シリアル通信を開始
  //
	Serial.begin(9600);
  delay(1000);
  
  Serial.println("Program Start ...");

  // WiFiモジュールの存在確認
  if ( WiFi.status() == WL_NO_MODULE ) 
  {
      Serial.println("WiFiモジュールがありません");
      while(true);  // abend
  }

  // WiFiファームウェアバージョンの確認
  String fv = WiFi.firmwareVersion();
  if ( fv < WIFI_FIRMWARE_LATEST_VERSION ) 
  {
      Serial.println("ファームウェアが最新のものではありません");
  }

  // 無線LANへの接続
  Serial.print("WiFi接続中...");
  while ( WiFi.begin ( SECRET_SSID, SECRET_PASS ) != WL_CONNECTED ) 
  {
      Serial.print(".");
      delay(1000);
  }

  // Arduinoに割り当てられたIPアドレスの確認
  Serial.print("IPアドレス：");
  Serial.println(WiFi.localIP().toString());

}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  void loop( void )
//  何度も繰り返し呼ばれる処理
//  引　数：なし
//  戻り値：なし
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void loop() {

  // HTTP通信のパラメータ

  char target_host[] = "www.spanky-world.com" ;     // 接続するサーバ
  int target_port = 443 ;                           // ポート番号、HTTPS通信=443、通常＝80

  // サーバに接続

  Serial.println("WEB connecting to host ...");
  if (!client.connect(target_host, target_port)) {
      Serial.println("接続失敗...１０秒後にリトライ");
      delay(10000);
      return;
  }

  // HTTPSにてGETリクエストの送信

  Serial.println("WiFi sending request ...");  

  String url = "/" ;                            // indexページを取得するならこれでOK  
//String url = "/index.php?lang=ja&pos=128" ;   // パラメータを付ける場合

  Serial.print("リクエストURL: ");
  Serial.println(url);

  client.println("GET " + url + " HTTP/1.1");
  client.println("Host: " + String(target_host));
  client.println("Connection: close");
  client.println("User-Agent: ArduinoWiFi/1.0");
  client.println("Accept: */*");
  client.println();

  // 応答受信

  Serial.println("Waiting for reply ");
  waitUntilReady(client);

  while( client.connected() || client.available() ) {
    String buff = readHttpStream(client);
    Serial.println("RECV:" + buff);
  }

  // 受信終了

  Serial.println("End transmission");
//delay(5000);  // 5秒待機後、再度ループする場合はこちら
  while(true);  // １回だけ処理してabendしたい場合はこちら
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  void waitUntilReady(WiFiSSLClient& client) 
//  受信可能状態になるまで待つ
//  引　数：client ＝ HTTPクライアント　
//  戻り値：TRUE＝受信可能、FALSE=受信不可能
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void waitUntilReady(WiFiSSLClient& client) {

  for ( int i=0; i<10; i++ ) {
    if ( client.available() ) {
      break;
    }
    Serial.print(".");
    delay(1000);
  }
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  String readHttpStream(WiFiSSLClient& client)
//  HTTPストリームから１行分（改行まで）受信する
//  引　数：client ＝ HTTPクライアント　
//  戻り値：受信したデータ
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
String readHttpStream(WiFiSSLClient& client) {

  String recv_buff = "";

  //  受信可能になるまで待つ
  waitUntilReady(client);

  //  １行受信ループ開始
  while ( client.connected() || client.available() ) {

    if ( !client.available() ) {
      return recv_buff;
    }

    char rcvchr = client.read();

//  Serial.write(rcvchr);         // 受信したものを見る時
//  Serial.print(rcvchr,HEX);     // 16進ダンプしたいとき

    if (rcvchr == '\n') 
    {
      return recv_buff;
    }

    if ( rcvchr != 0x0D ) {
      recv_buff += rcvchr;
    }
  }
}